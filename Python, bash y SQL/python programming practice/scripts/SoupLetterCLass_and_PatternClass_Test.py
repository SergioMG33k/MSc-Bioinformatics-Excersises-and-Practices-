from LetterSoupClass import *

print('-PRUEBAS CON LETTERSOUPCLASS FINAL-')
sopita3 = LetterSoup('Data/soup3.txt')
print('\n')
sopita2 = LetterSoup('Data/soup2.txt')
print('\n')
sopita = LetterSoup('Data/soup1.txt')
print('\n')
brokensoup1 = LetterSoup('Data/brokensoup1.txt')
print('\n')
brokensoup2 = LetterSoup('Data/brokensoup2.txt')
print('\n')
bad_cols_soup = LetterSoup('Data/bad-cols-soup.txt')
print('\n')
print('LLAMADA DEL MÉTODO INTENRO  "__repr__" USNADO "print(objeto)",CON EL QUE SE MOSTRARA LA SOPA PER SE\n-----------------------------------------------------------------')
print(sopita)
print('\n')
print(sopita2)#usando eel metodo __repr__, para mostrar la sopa
print('\n')
print(sopita3)
print('\n')
print(brokensoup1) 
print('\n')   
print(brokensoup2)  
print('\n')
print(bad_cols_soup)
print('---------------------------')
print('MUESTRA DE LA LISTA DE LISTAS QUE CONFORMAN LA SOPA, DICHA LISTA DE LISTAS ESTA EN EL ATRIBUTO ".soup"\n-----------------------------------------------------------------')
print('sopita1 is:',sopita.soup)
print('\n')
print('sopita12 es:',sopita2.soup)
print('\n')
print('sopita3 es:',sopita3.soup)
print('\n')
print('brokensoup1 es:',brokensoup1.soup) 
print('\n')   
print('brokensoup2 is:',brokensoup2.soup)  
print('\n')
print('bad_cols_soup es:',bad_cols_soup.soup)
print('---------------------------')
print('VERIFICACIÓN DEL ATRIBUTO "invalid_soup" PARA COMPROBRAR SI LA SOPA NO ES VALIDA.SI DEVUELVE 1 LA SOPA NO ES VALIDA, SI SDEVUELVE 0 ES UNA SOPA VALIDA Y ACEPTADA \n-----------------------------------------------------------------')
print('El atributo invalid_soup en sopita1 es:',sopita.invalidsoup)
print('\n')
print('El atributo invalid_soup en sopita2 es:',sopita2.invalidsoup)
print('\n')
print('El atributo invalid_soup en sopita1 es:',sopita3.invalidsoup)
print('\n')
print('El atributo invalid_soup en brokensoup1 es:',brokensoup1.invalidsoup) 
print('\n')   
print('El atributo invalid_soup en brokensoup2 es:',brokensoup2.invalidsoup)  
print('\n')
print('El atributo invalid_soup en bad_cols_soup es:',bad_cols_soup.invalidsoup)
print('-----------------------------')
print('FUNCIÓN IMPLEMENTADA PARA REPARAR SOPAS NO VALIDAD, EN EL QUE SE ELIMINAN LOS ESPACIOS ILOGICOS,SE CAMBIAN LOS EPSACION POR PUNTOS, Y SE OBTIENE UNA SOPA VALIDAD CON TODAS SUS FILAS DE UNA MISMA LONGITUD')

if brokensoup1.invalidsoup == 1:
    brokensoup1.repair_invalidsoup()
    print('la sopa brokensoup1 ha sido reparada:',brokensoup1) 
    print('\n')
if brokensoup2.invalidsoup == 1:
    brokensoup2.repair_invalidsoup()
    print('la sopa brokensoup2 ha sido reparada:',brokensoup2) 
    print('\n')
if bad_cols_soup.invalidsoup == 1:
    bad_cols_soup.repair_invalidsoup()
    print('la sopa bad_cols_soup ha sido reparada:',bad_cols_soup)
    print('\n')

print('LLAMADA DE LOS METODOS "num rows" y "num_cols", PARA VER EL NUMERO DE FILAS Y COLUMNAS QUE CONTIENE LA SOPA\n-----------------------------------------------------------------')
print('La sopa sopita1 contiene {} filas y {} columnas'.format(sopita.num_rows(),sopita.num_cols()))
print('\n')
print('La sopa sopita2 contiene {} filas y {} columnas'.format(sopita2.num_rows(),sopita2.num_cols()))
print('\n')
print('La sopa sopita3 contiene {} filas y {} columnas'.format(sopita3.num_rows(),sopita3.num_cols()))
print('\n')
print('La sopa brokensoup1 contiene {} filas y {} columnas'.format(brokensoup1.num_rows(),brokensoup1.num_cols()))
print('\n')   
print('La sopa brokensoup1 contiene {} filas y {} columnas'.format(brokensoup2.num_rows(),brokensoup1.num_cols()))
print('\n')
print('La sopa bad_cols_soup contiene {} filas y {} columnas'.format(bad_cols_soup.num_rows(),brokensoup1.num_cols()))
print('-----------------------------')
print('MOSTRAR LOS ELEMENTOS E LA SOPA EN POSICIONES ESPECIFICAS QUE PASAMOS AL METODO "at()"\n----------------------------------------------------------------- ')
print(sopita.at(0,0),sopita.at(0,1),sopita.at(1,2))
print('\n')
print(sopita2.at(0,0),sopita2.at(0,1),sopita2.at(1,2))
print('\n')
print(sopita3.at(0,0),sopita3.at(0,1),sopita3.at(1,2))
print('-----------------------------')

print('-PRUEBAS CON PATTERNCLASS FINAL-')
pattern1 = Pattern(filename="Data/p1.txt")
pattern2= Pattern(filename="Data/p3.txt",dictfilename="Data/dict one.txt")
pattern3= Pattern(filename="Data/p4.txt",dictfilename="Data/dict one.txt")
print('\n')
print('LLAMADA DEL MÉTODO INTENRO  "__repr__" USNADO "print(objeto)",CON EL QUE SE MOSTRARA EL PATRÓN PER SE\n-----------------------------------------------------------------')
print(pattern1)
print('\n')
print(pattern2)
print('\n')
print(pattern3)
print('\n')
print('COMPROBACION DE ATRIBUTOS DEL PATRON----------------\n')
print('La ruta de pattern1 es:',pattern1.filename)
print('\n')
print('La ruta de pattern2 es:',pattern2.filename)
print('\n')
print('La ruta de pattern3 es:',pattern3.filename)
print('\n')
print('pattern 1 es:',pattern1.pattern)
print('\n')
print('pattern 2 es:',pattern2.pattern)
print('\n')
print('pattern 3 es:',pattern3.pattern)
print('\n')
print('El atributo invalid_soup en pattern1 es:',pattern1.invalidpattern)
print('\n')
print('El atributo invalid_soup en pattern2 es:',pattern2.invalidpattern)
print('\n')
print('El atributo invalid_soup en pattern3 es:',pattern3.invalidpattern)
print('\n')
print('El diccionario en pattern1 es:',pattern1.dictionary)
print('\n')
print('El diccionario en pattern2 es:',pattern2.dictionary)
print('\n')
print('El diccionario en pattern3 es:',pattern3.dictionary)
print('\n')
print('LLAMADA DE LOS METODOS "num_rowsp()" y "num_colsp()", PARA VER EL NUMERO DE FILAS Y COLUMNAS QUE CONTIENE UN PATRON\n-----------------------------------------------------------------')
print('El patron pattern1 contiene {} filas y {} columnas'.format(pattern1.num_rowsp(),pattern1.num_colsp()))
print('\n')
print('El patron pattern2 contiene {} filas y {} columnas'.format(pattern2.num_rowsp(),pattern2.num_colsp()))
print('\n')
print('El patron pattern2 contiene {} filas y {} columnas'.format(pattern3.num_rowsp(),pattern3.num_colsp()))
print('\n')
print('METODOS PARA LA ROTACION DEL PATRON\n-------------------------------------------')
print('pattern1 sin rotar',*pattern1.pattern,sep='\n')
print('\n')
print('pattern1 rotado 90 grados',*pattern1.rotate90(),sep='\n')
print('\n')
print('pattern1 rotado 180 grados',*pattern1.rotate180(),sep='\n')
print('\n')
print('pattern1 rotado 270 grados',*pattern1.rotate270(),sep='\n')
print('\n')
print('Simetria axial de pattern1', *pattern1.axial(),sep='\n')
print('\n')
print('Simetria axial de pattern1 rotada 90 grados', *pattern1.axial90(),sep='\n')
print('\n')
print('Simetria axial de pattern1 rotada 180 grados', *pattern1.axial180(),sep='\n')
print('\n')
print('Simetria axial de pattern1 rotada 270 grados', *pattern1.axial270(),sep='\n')
print('\n')
print('pattern2 sin rotar',*pattern2.pattern,sep='\n')
print('\n')
print('pattern2 rotado 90 grados',*pattern2.rotate90(),sep='\n')
print('\n')
print('pattern2 rotado 180 grados',*pattern2.rotate180(),sep='\n')
print('\n')
print('pattern2 rotado 270 grados',*pattern2.rotate270(),sep='\n')
print('\n')
print('Simetria axial de pattern2', *pattern2.axial(),sep='\n')
print('\n')
print('Simetria axial de pattern2 rotada 90 grados', *pattern2.axial90(),sep='\n')
print('\n')
print('Simetria axial de pattern2 rotada 180 grados', *pattern2.axial180(),sep='\n')
print('\n')
print('Simetria axial de pattern2 rotada 270 grados', *pattern2.axial270(),sep='\n')
print('\n')
print('pattern3 sin rotar',*pattern3.pattern,sep='\n')
print('\n')
print('pattern3 rotado 90 grados',*pattern3.rotate90(),sep='\n')
print('\n')
print('pattern3 rotado 180 grados',*pattern3.rotate180(),sep='\n')
print('\n')
print('pattern3 rotado 270 grados',*pattern3.rotate270(),sep='\n')
print('\n')
print('Simetria axial de pattern3', *pattern3.axial(),sep='\n')
print('\n')
print('Simetria axial de pattern3 rotada 90 grados', *pattern3.axial90(),sep='\n')
print('\n')
print('Simetria axial de pattern3 rotada 180 grados', *pattern3.axial180(),sep='\n')
print('\n')
print('Simetria axial de pattern3 rotada 270 grados', *pattern3.axial270(),sep='\n')
print('\n')
print('METODO pat_variations PARA OBTENER UN DICCIONARIO CON TODAS LAS ROTACIONES DEL PATRON ,SIMETRIA AXIAL , Y ROTACIONES DE LA SIMETRIA\n------------------')
print('Dicionario de variaciones en pattern1:',pattern1.pat_variations())
print('\n')
print('Dicionario variaciones en pattern2:',pattern2.pat_variations())
print('\n')
print('Dicionario variaciones en pattern3:',pattern3.pat_variations())
print('\n')
print('METODOS MATCH, PARA ENCONTRAR COINCIDENCIAS DEL PATRON EN UNA SOPA\n--------------------------')
print('Método matching_at para comprobar concidencia de pattern1 en la posicion 3,3 de sopita: ')
print(pattern1.matching_at(3,3,sopita))
print('\n')
print('Método matching_at para comprobar concidencia de pattern1 en la posicion 2,2 de sopita2: ')
print(pattern1.matching_at(2,2,sopita2))
print('\n')
print('Método matching_at para comprobar concidencia de pattern2 en la posicion 1,0 de sopita3: ')
print(pattern2.matching_at(1,0,sopita3))
print('\n')
print('Método matching_at para comprobar concidencia de pattern3 en la posicion 0,1 de sopita3: ')
print(pattern3.matching_at(0,1,sopita3))
print('\n')
print('Método matching_at para comprobar concidencia de pattern3 en la posicion 8,8 de sopita3: ')
print(pattern3.matching_at(8,8,sopita3))
print('\n')
print('Método flex_matching_at para comprobar concidencias de pattern1 y su variaciones rotadas y simetría en la posicion 4,2 de sopita: ')
print(pattern1.flex_matching_at(4,2,sopita))
print('\n')
print('Método flex_matching_at para comprobar concidencias de pattern1 y su variaciones rotadas y simetría en la posicion 0,0 de sopita2: ')
print(pattern1.flex_matching_at(2,0,sopita2))
print('\n')
print('Método flex_matching_at para comprobar concidencias de pattern3 y su variaciones rotadas y simetría en la posicion 0,0 de sopita3: ')
print(pattern3.flex_matching_at(3,3,sopita3))
print('\n')
print('Método all_matches con argumento flex=False(por defecto), para encontrar todas las coincidencias de pattern1 en sopita')
print(pattern1.all_matches(sopita))
print('\n')
print('Método all_matches con argumento flex=False(por defecto), para encontrar todas las coincidencias de pattern1 en sopita2')
print(pattern1.all_matches(sopita2))
print('\n')
print('Método all_matches con argumento flex=False(por defecto), para encontrar todas las coincidencias de pattern2 en sopita3')
print(pattern2.all_matches(sopita3))
print('\n')
print('Método all_matches con argumento flex=False(por defecto), para encontrar todas las coincidencias de pattern3 en sopita3')
print(pattern3.all_matches(sopita3))
print('\n')
print('Método all_matches con argumento flex=True, para encontrar todas las coincidencias de pattern1 y su variaciones rotadas y simetría en sopita')
print(pattern1.all_matches(sopita,flex=True))
print('\n')
print('Método all_matches con argumento flex=True, para encontrar todas las coincidencias de pattern1 y su variaciones rotadas y simetría en sopita2')
print(pattern1.all_matches(sopita2,flex=True))
print('\n')
print('Método all_matches con argumento flex=True, para encontrar todas las coincidencias de pattern2 y su variaciones rotadas y simetría en sopita3')
print(pattern2.all_matches(sopita3,flex=True))
print('\n')
print('Método all_matches con argumento flex=True, para encontrar todas las coincidencias de pattern3 y su variaciones rotadas y simetría en sopita3')
print(pattern3.all_matches(sopita3,flex=True))
print('\n')

print('EJEMPLO PRACTICO DE METODOS Y FUNCIONALIDADES DEL CODIGO APLICADOS A SOPA DE AMINOACIDOS ,CON PATRON Y DICCIONARIO DE AMINOACIDOS\n-------------------------')
aasoup = LetterSoup('Data/aasoup.txt')
aapattern = Pattern('Data/aapattern.txt', dictfilename='Data/aminoacid-groups.txt')  

print('La sopa de aminoacidor aasoup es:',aasoup)
print('\n')
print('La sopa de aminoacidos aasoup contiene {} filas y {} columnas'.format(aasoup.num_rows(),aasoup.num_cols()))
print('\n')
print('El patron de aminoacidos aapattern:',aapattern)
print('\n')
print('El patron de aminoacidos aapattern tiene un diccionario de aminoacidos asociado:',aapattern.dictionary)
print('\n')
print('Método all_matches con argumento flex=False(por defecto), para encontrar todas las coincidencias de aapattern en aasoup')
print(aapattern.all_matches(aasoup))
print('\n')
print('Método all_matches con argumento flex=True, para encontrar todas las coincidencias de aapattern y su variaciones rotadas y simetría en aasoup')
print(pattern3.all_matches(sopita3,flex=True))

 
      
